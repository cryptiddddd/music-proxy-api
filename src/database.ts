import { mongoRequest } from "./utils";

// INTERFACES //////////////////////
interface MyResponse {
    status: number;
    message: string;
    data?: any;
}

interface SpotifyTokens {
    accessToken: string;
    refreshToken: string;
    id?: string;
}


// REGISTER NEW USER //////////////////////

/**
 * called when a new user is registered to the database. 
 * checks that user is not already registered first. if so: updates access token and returns existing id.
 * @param MONGO_KEY mongo api key
 * @param spotifyAuthKey spotify auth key
 * @returns user id, generated by mongodb
 */
async function newDatabaseUser(MONGO_KEY: string, tokens: SpotifyTokens): Promise<string> {
    // i wish that i woulc check for duplicates, but alas...

    // register new user.
    console.log("registering new user.");
    let result = await mongoRequest(MONGO_KEY, "add_user", "POST", tokens);
    
    if (result.status != 201) {
        return result.message;
    }

    return result.data.insertedId;
}

// UPDATE DATA //////////////////////
/**
 * updates a user's access token. no return value.
 * @param MONGO_KEY mongo database api.
 * @param userID user's unique id.
 * @param newAccessToken user's new access token.
 */
async function updateAccessToken(MONGO_KEY: string, userID: string, newAccessToken: string): Promise<void> {
    console.log("updating user data...");
    await mongoRequest(MONGO_KEY, "update_access", "PATCH", {userID: userID, accessToken: newAccessToken});
}


// READ DATA //////////////////////

/**
 * fetch a user's data using their mongo-generated id.
 * @param MONGO_KEY key for mongo database api
 * @param userID user's unique id
 * @returns mongodb's response. if successful, this will contain the user's data. check .status for code.
 */
async function fetchUserData(MONGO_KEY: string, userID: string): Promise<MyResponse> {
    // fetching data..
    console.log("fetching user data...");
    let result = await mongoRequest(MONGO_KEY, "user_data", "POST", {userID: userID});
    console.log("fetched.");

    if ("error" in result) {
        return {status: 400, message: `something went wrong. mongodb message: ${result.error.message}`};
    }

    return (result as MyResponse);
}

/**
 * fetch user's access and refresh tokens.
 * @param MONGO_KEY mongo api key
 * @param userID user's id
 * @returns user's tokens for spotify, refresh and access.
 */
async function fetchUserTokens(MONGO_KEY: string, userID: string): Promise<SpotifyTokens> {
    let userData = await fetchUserData(MONGO_KEY, userID);

    if (userData.status != 200) {
        throw {status: userData.status, message: "user data could not be found."};
    }

    return {refreshToken: userData.data.refreshToken, accessToken: userData.data.accessToken};
}


export {
    fetchUserTokens,
    newDatabaseUser,
    updateAccessToken
};
